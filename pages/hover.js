import { MoonIcon, SunIcon } from '@heroicons/react/outline';
import { useContext, useRef, useEffect } from "react";
import { GlobalContext } from "@utils/GlobalContext";
import BackToTop from '@components/BackToTop';
import Layout from '@components/Layout';
import Navbar from '@components/Navbar';
import Head from 'next/head';
import Link from 'next/link';
import Dotgrid from '@components/hover/Dotgrid';
import Pointer from '@components/hover/Pointer';
import Section from '@components/Section';

function Div() {
  const divRef = useRef(null)
  const mainRef = useRef(null)
  function mouseMoveEvent(e) {
    const { x, y } = mainRef.current.getBoundingClientRect();
    mainRef.current.style.setProperty('--xx', e.clientX - x);
    mainRef.current.style.setProperty('--yy', e.clientY - y);
  }

  useEffect(() => {
    if (divRef) {
      divRef.current.addEventListener('mousemove', mouseMoveEvent)
    }
    return () => divRef.current?.removeEventListener('mousemove', mouseMoveEvent)
  }, [divRef])

  return (
    <div ref={mainRef} className="dark:bg-neutral-800 w-full border dark:border-neutral-700 rounded-lg">
      <div ref={divRef} className="shiny relative overflow-hidden cursor-pointer h-60 flex justify-center items-center text-center">
        <div>
          <h1 className="dark:text-white font-medium text-2xl">Text 1</h1>
          <h2 className="dark:text-white text-lg">Text 1</h2>
        </div>
      </div>
    </div>
  )
}

export default function Hover() {
  const { darkMode, setDarkMode } = useContext(GlobalContext);
  const cardRef = useRef(null)
  let X, Y = 0

  function mouseMoveEvent(e) {
    let w = cardRef.current?.clientWidth;
    let h = cardRef.current?.clientHeight;
    let b = cardRef.current?.getBoundingClientRect();
    // console.log("mousemove")
    // console.log("W : ", w)
    // console.log("H : ", h)
    // console.log("B : ", b)
    X = (e.clientX - b?.left) / w;
    Y = (e.clientY - b?.top) / h;
    // console.log("X : ", X);
    // console.log("Y : ", Y);
    let rX = -(X - 0.5) * 10;
    let rY = (Y - 0.5) * 10;
    let bgX = 40 + 20 * X;
    let bgY = 40 + 20 * Y;
    document.documentElement.style.setProperty("--x", 100 * X + "%");
    document.documentElement.style.setProperty("--y", 100 * Y + "%");
    document.documentElement.style.setProperty("--bg-x", bgX + "%");
    document.documentElement.style.setProperty("--bg-y", bgY + "%");
    document.documentElement.style.setProperty("--r-x", rX + "deg");
    document.documentElement.style.setProperty("--r-y", rY + "deg");
  }

  function mouseLeaveEvent(e) {
    console.log("mouseleave")
    document.documentElement.style.removeProperty("--x");
    document.documentElement.style.removeProperty("--y");
    document.documentElement.style.removeProperty("--bg-x");
    document.documentElement.style.removeProperty("--bg-y");
    document.documentElement.style.removeProperty("--r-x");
    document.documentElement.style.removeProperty("--r-y");
  }

  useEffect(() => {
    if (cardRef) {
      cardRef.current.addEventListener('mousemove', mouseMoveEvent)
      cardRef.current.addEventListener('mouseleave', mouseLeaveEvent)
    }
    return () => {
      cardRef.current?.removeEventListener('mousemove', mouseMoveEvent)
      cardRef.current?.removeEventListener('mouseleave', mouseLeaveEvent)
    }
  }, [cardRef])

  return (
    <>
      <Head>
        <title>Hover Page</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <Layout>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8 py-8">

          <div className="pointer-events-none absolute inset-0">
            <div className="min-h-full w-full max-w-7xl grid-cols-3 gap-3.5 grid px-4 sm:px-6 md:px-8 mx-auto">
              <div className="border-x border-neutral-200/80 dark:border-white/5"></div>
              <div className="border-x border-neutral-200/80 dark:border-white/5"></div>
              <div className="border-x border-neutral-200/80 dark:border-white/5"></div>
            </div>
          </div>

          <Pointer />

          <Dotgrid />

          <Link href="https://linear.app/customers" className="block text-sky-500">https://linear.app/customers</Link>
          <Link href="https://codepen.io/akella/pen/XWYrRmb" className="block text-sky-500">https://codepen.io/akella/pen/XWYrRmb</Link>

          <div ref={cardRef} className="card my-8">
            <div className="card__wrapper">
              <div className="card__3d">
                <div className="card__image">
                  <img src="http://allyourhtml.club/carousel/image.webp" alt="" />
                </div>
                <div className="card__layer1"></div>
                <div className="card__layer2"></div>
              </div>
            </div>
          </div>

          <div className="flex overflow-x-auto gap-4 pb-4 relative z-10">
            <Div />
            <Div />
            <Div />
          </div>

          <Section id="link-hover-underline" name="Link Hover Underline">
            <ul className="space-y-4 my-8">
              <li>
                <Link href="/" className="dark:text-white underlined inline-block">
                  Home
                </Link>
              </li>
              <li>
                <Link href="/" className="dark:text-white hover-underline-animation inline-block">
                  Home
                </Link>
              </li>
              <li>
                <Link href="/" className="dark:text-white underline-center-animation">
                  Home
                </Link>
              </li>
            </ul>
          </Section>

          <div className="!py-2 px-2 rounded mx-4 bg-opacity-20 dark:bg-opacity-40 bg-gray-100 dark:bg-neutral-800 backdrop-filter backdrop-blur fixed bottom-20 right-3 md:right-10 z-10">
            {darkMode ?
              <button onClick={() => setDarkMode(!darkMode)} aria-label="Change Theme" className="w-8 h-8 p-1 transition-all ease-in duration-300 bg-neutral-800 hover:bg-neutral-700 text-white rounded-full">
                <SunIcon />
              </button>
              :
              <button onClick={() => setDarkMode(!darkMode)} aria-label="Change Theme" className="w-8 h-8 p-1 transition-all ease-in duration-300 bg-gray-100 hover:bg-gray-200 rounded-full">
                <MoonIcon />
              </button>
            }
          </div>

          <BackToTop />

        </main>
      </Layout>
    </>
  )
}