import Head from "next/head";
import { GlobalContext } from "@utils/GlobalContext";
import { Fragment, useContext, useState } from "react";
import { ArrowRightIcon, ArrowSmRightIcon, CheckIcon, ChevronDownIcon, ChevronUpIcon, ExternalLinkIcon, EyeIcon, EyeOffIcon, FilterIcon, MoonIcon, PlayIcon, ShareIcon, SunIcon, UserCircleIcon, ViewGridAddIcon, ViewGridIcon, XIcon } from '@heroicons/react/outline'
import Button from "@components/Button";
import Footer from "@components/Footer"
import Navbar from "@components/Navbar";
import Section from "@components/Section";
import BackToTop from "@components/BackToTop";
import Layout from "@components/Layout";
import TocLink from "@components/TocLink";
import * as ContextMenu from '@radix-ui/react-context-menu';
import * as Tooltip from '@radix-ui/react-tooltip';
import * as HoverCard from '@radix-ui/react-hover-card';
import * as NavigationMenu from "@radix-ui/react-navigation-menu";
import * as Select from '@radix-ui/react-select';
import * as Toast from "@radix-ui/react-toast";
import * as DropdownMenu from "@radix-ui/react-dropdown-menu";
import * as Dialog from "@radix-ui/react-dialog";
import * as AlertDialog from '@radix-ui/react-alert-dialog';
import * as Popover from "@radix-ui/react-popover";
import * as Collapsible from "@radix-ui/react-collapsible";
import * as Accordion from "@radix-ui/react-accordion";
import * as Checkbox from "@radix-ui/react-checkbox";
import * as Label from "@radix-ui/react-label";
import * as RadioGroup from "@radix-ui/react-radio-group";
import * as Switch from '@radix-ui/react-switch';
import * as Slider from '@radix-ui/react-slider';
import * as Toggle from '@radix-ui/react-toggle';
import * as Tabs from '@radix-ui/react-tabs';
import * as Progress from "@radix-ui/react-progress";
import { Transition } from "@headlessui/react";
import cx from "classnames";
import LinkButton from "@components/LinkButton";
import Code from "@components/Code";
import Image from "next/image";
import { StarIcon } from "@heroicons/react/solid";
import Text from "@components/Text";

const generalMenuItems = [
	{
		label: "New File",
		icon: <FilterIcon className="mr-2 h-3.5 w-3.5" />,
		shortcut: "âŒ˜+N",
	},
];

const users = [
	{
		name: "Adam",
		url: "https://github.com/adamwathan.png",
	},
];

const items = [
	{
		header: "What is Radix UI?",
		content:
			"Radix Primitives is a low-level UI component library with a focus on accessibility, customization and developer experience. You can use these components either as the base layer of your design system, or adopt them incrementally.",
	},
	{
		header:
			"Each primitive can be installed individually so you we adopt them incrementally?",
		content: "Yes!",
	},
	{
		header: "Is it accessible?",
		content: "Yes!",
	},
];

const starters = [
	{ id: "red", title: "Bulbasaur" },
	{ id: "green", title: "Charmader" },
	{ id: "blue", title: "Squirtle" },
];

const tabs = [
	{
		title: "Inbox",
		value: "tab1",
	},
	{
		title: "Today",
		value: "tab2",
	},

	{
		title: "Upcoming",
		value: "tab3",
	},
];

export default function Third() {
	const { darkMode, setDarkMode } = useContext(GlobalContext);
	const [openToast, setOpenToast] = useState(false);
	const [showGrid, setShowGrid] = useState(false);
	const [openDialog, setOpenDialog] = useState(false);
	const [openAlertDialog, setOpenAlertDialog] = useState(false);
	const [openCollapsible, setOpenCollapsible] = useState(false);
	const [radioGroupvalue, setRadioGroupValue] = useState(starters[0].title);
	const [switchValue, setSwitchValue] = useState(false)
	const [slider, setSlider] = useState([50]);
	const [starred, setStarred] = useState(false);
	const [progress, setProgress] = useState(60);

	return (
		<>
			<Head>
				<title>Radix UI</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Navbar />

			<Layout>
				<main className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8 pb-16">

					<Section id="toc" name="Radix UI Components TOC">
						<div className="grid sm:grid-cols-2 md:grid-cols-3">
							<div>
								<TocLink href="#progress" text="Progress" />
								<TocLink href="#tabs" text="Tabs" />
								<TocLink href="#toggle" text="Toggle" />
								<TocLink href="#slider" text="Slider" />
								<TocLink href="#switch" text="Switch" />
								<TocLink href="#radio-group" text="Radio Group" />
								<TocLink href="#checkbox" text="Checkbox" />
							</div>
							<div>
								<TocLink href="#accordion" text="Accordion" />
								<TocLink href="#collapsible" text="Collapsible" />
								<TocLink href="#popover" text="Popover" />
								<TocLink href="#alert-dialog" text="Alert Dialog" />
								<TocLink href="#dialog" text="Dialog" />
								<TocLink href="#dropdown-menu" text="Dropdown Menu" />
							</div>
							<div>
								<TocLink href="#toast" text="Toast" />
								<TocLink href="#select" text="Select" />
								<TocLink href="#navigation-menu" text="Navigation Menu" />
								<TocLink href="#hover-card" text="Hover Card (Link)" />
								<TocLink href="#tooltip" text="Tooltip" />
								<TocLink href="#context-menu" text="Context Menu (Right Click)" />
							</div>
						</div>
					</Section>

					<Code code={
						`yarn add tailwindcss-radix

// tailwind.config.js
plugins: [
// Initialize with default values (see options below)
require("tailwindcss-radix")(),
]`}>
					</Code>

					<div className="!py-2 px-2 rounded mx-4 bg-opacity-20 dark:bg-opacity-40 bg-gray-100 dark:bg-neutral-800 backdrop-filter backdrop-blur fixed bottom-20 right-3 md:right-10 z-10">
						{darkMode ?
							<button onClick={() => setDarkMode(!darkMode)} aria-label="Change Theme" className="w-8 h-8 p-1 transition-all ease-in duration-300 bg-neutral-800 hover:bg-neutral-700 text-white rounded-full">
								<SunIcon />
							</button>
							:
							<button onClick={() => setDarkMode(!darkMode)} aria-label="Change Theme" className="w-8 h-8 p-1 transition-all ease-in duration-300 bg-gray-100 hover:bg-gray-200 rounded-full">
								<MoonIcon />
							</button>
						}
					</div>

					<Section id="progress" name="Progress" className="relative">
						<Progress.Root
							value={progress}
							className="h-2 max-w-sm overflow-hidden rounded-full bg-gray-100 dark:bg-neutral-800"
						>
							<Progress.Indicator
								style={{ width: `${progress}%` }}
								className="h-full bg-blue-500 duration-300 ease-in-out"
							/>
						</Progress.Root>
					</Section>

					<Section id="tabs" name="Tabs" className="relative">
						<Tabs.Root defaultValue="tab1">
							<Tabs.List
								className={cx("flex max-w-sm rounded-t bg-gray-100 dark:bg-gray-800 border-t border-x dark:border-neutral-700")}
							>
								{tabs.map(({ title, value }) => (
									<Tabs.Trigger
										key={`tab-trigger-${value}`}
										value={value}
										className={cx(
											"group",
											"border-b first:border-r last:border-l",
											"border-gray-300 dark:border-neutral-700",
											"radix-state-active:border-b-2",
											"radix-state-active:border-b-blue-500 radix-state-active:bg-white radix-state-inactive:bg-gray-100",
											"dark:radix-state-active:border-b-blue-500 dark:radix-state-active:bg-neutral-900 dark:radix-state-inactive:bg-neutral-800",
											"flex-1 px-3 py-2.5"
										)}
									>
										<span
											className={cx(
												"text-sm font-medium",
												"text-gray-700 dark:text-gray-100"
											)}
										>
											{title}
										</span>
									</Tabs.Trigger>
								))}
							</Tabs.List>
							{tabs.map(({ value }) => (
								<Tabs.Content
									key={`tab-content-${value}`}
									value={value}
									className={cx("rounded-b-lg max-w-sm bg-gray-100 px-6 py-4 dark:bg-neutral-800")}
								>
									<span className="text-sm text-gray-700 dark:text-gray-100">
										{
											{
												tab1: "Your inbox is empty",
												tab2: "Make some coffee",
												tab3: "Order more coffee",
											}[value]
										}
									</span>
								</Tabs.Content>
							))}
						</Tabs.Root>
					</Section>

					<Section id="toggle" name="Toggle" className="relative">
						<Toggle.Root
							defaultPressed={starred}
							onPressedChange={setStarred}
							asChild
						>
							<Button className="flex items-center">
								{starred ? (
									<StarIcon className="h-4 w-4 text-yellow-400" />
								) : (
									<StarIcon className="h-4 w-4 text-gray-400" />
								)}
								<span className="ml-2 leading-5">{starred ? "Starred" : "Star"}</span>
							</Button>
						</Toggle.Root>

					</Section>

					<Section id="slider" name="Slider" className="relative">
						<Text>{slider}</Text>
						<Slider.Root
							onValueChange={(e) => setSlider(e)}
							defaultValue={slider}
							max={100}
							step={1}
							aria-label="value"
							className="relative flex h-5 w-64 touch-none items-center"
						>
							<Slider.Track className="relative h-1 w-full grow rounded-full bg-gray-100 dark:bg-neutral-800">
								<Slider.Range className="absolute h-full rounded-full bg-blue-600	" />
							</Slider.Track>
							<Slider.Thumb
								className={cx(
									"block h-5 w-5 rounded-full bg-blue-600",
									"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
								)}
							>
							</Slider.Thumb>
						</Slider.Root>
					</Section>

					<Section id="switch" name="Switch" className="relative">
						<Text>{switchValue ? "On" : "Off"}</Text>
						<Switch.Root
							onCheckedChange={(e) => setSwitchValue(e)}
							checked={switchValue}
							className={cx(
								"group",
								"radix-state-checked:bg-blue-600",
								"radix-state-unchecked:bg-gray-200 dark:radix-state-unchecked:bg-neutral-800",
								"relative inline-flex h-[24px] w-[44px] flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out",
								"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
							)}
						>
							<Switch.Thumb
								className={cx(
									"group-radix-state-checked:translate-x-5",
									"group-radix-state-unchecked:translate-x-0",
									"pointer-events-none inline-block h-[20px] w-[20px] transform rounded-full bg-white shadow-lg ring-0 transition duration-200 ease-in-out"
								)}
							/>
						</Switch.Root>
					</Section>

					<Section id="radio-group" name="Radio Group" className="relative">
						<form>
							<legend className="text-sm font-medium leading-4 text-gray-900 dark:text-gray-100">
								Choose your starter
							</legend>
							<RadioGroup.Root
								aria-label="Pokemon starters"
								defaultValue={"Bulbasaur"}
								onValueChange={setRadioGroupValue}
							>
								<div className="mt-3 space-y-3">
									{starters.map((pokemon) => (
										<div key={pokemon.id} className="flex items-center">
											<RadioGroup.Item
												id={pokemon.id}
												value={pokemon.title}
												className={cx(
													"peer relative w-4 h-4 rounded-full",
													// Setting the background in dark properly requires a workaround (see css/tailwind.css)
													"border border-transparent text-white",
													"radix-state-checked:bg-blue-600",
													"radix-state-unchecked:bg-gray-100 dark:radix-state-unchecked:bg-neutral-800",
													"focus:outline-none focus:ring-0 focus:ring-offset-0 focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-gray-800"
												)}
											>
												<RadioGroup.Indicator className="absolute inset-0 flex items-center justify-center leading-0">
													<div className="w-1.5 h-1.5 rounded-full bg-white"></div>
												</RadioGroup.Indicator>
											</RadioGroup.Item>
											<label
												htmlFor={pokemon.id}
												className="ml-2 block text-sm font-medium text-gray-700 dark:text-gray-400"
											>
												{pokemon.title}
											</label>
										</div>
									))}
								</div>
							</RadioGroup.Root>
						</form>
					</Section>

					<Section id="checkbox" name="Checkbox" className="relative">
						<form className="flex items-center">
							<Checkbox.Root
								id="c1"
								defaultChecked
								className={cx(
									"flex h-4 w-4 items-center justify-center rounded ring-1 ring-gray-400 dark:ring-neutral-700",
									"radix-state-checked:bg-blue-600 radix-state-unchecked:bg-gray-100 dark:radix-state-unchecked:bg-neutral-800",
									"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
								)}
							>
								<Checkbox.Indicator>
									<CheckIcon className="h-4 w-4 self-center text-white" />
								</Checkbox.Indicator>
							</Checkbox.Root>

							<Label.Label
								htmlFor="c1"
								className="ml-3 select-none text-sm font-medium text-gray-900 dark:text-gray-100"
							>
								Accept terms and conditions
							</Label.Label>
						</form>
					</Section>

					<Section id="accordion" name="Accordion" className="relative">
						<Accordion.Root
							type="single"
							defaultValue="item-1"
							className={cx("space-y-4")}
						>
							{items.map(({ header, content }, i) => (
								<Accordion.Item
									key={`header-${i}`}
									value={`item-${i + 1}`}
									className="rounded-lg focus-within:ring focus-within:ring-blue-500 focus-within:ring-opacity-75 focus:outline-none"
								>
									<Accordion.Header className="w-full">
										<Accordion.Trigger
											className={cx(
												"group",
												"radix-state-open:rounded-t-lg radix-state-closed:rounded-lg",
												"focus:outline-none",
												"inline-flex w-full items-center justify-between bg-gray-100 px-4 py-2 text-left dark:bg-neutral-800"
											)}
										>
											<span className="text-sm font-medium text-gray-900 dark:text-gray-100">
												{header}
											</span>
											<ChevronDownIcon
												className={cx(
													"ml-2 h-5 w-5 shrink-0 text-gray-700 ease-in-out dark:text-gray-400",
													"group-radix-state-open:rotate-180 group-radix-state-open:duration-300"
												)}
											/>
										</Accordion.Trigger>
									</Accordion.Header>
									<Accordion.Content className="pt-2 w-full rounded-b-lg bg-white px-4 pb-3 dark:bg-neutral-900">
										<div className="text-sm text-gray-700 dark:text-gray-400">
											{content}
										</div>
									</Accordion.Content>
								</Accordion.Item>
							))}
						</Accordion.Root>
					</Section>

					<Section id="collapsible" name="Collapsible" className="relative">
						<Collapsible.Root open={openCollapsible} onOpenChange={setOpenCollapsible}>
							<Collapsible.Trigger
								className={cx(
									"group flex w-full select-none items-center justify-between rounded-md px-4 py-2 text-left text-sm font-medium",
									"bg-gray-100 text-gray-900 dark:bg-neutral-800 dark:text-gray-100",
									"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
								)}
							>
								<div>My Playlists</div>
								<ChevronDownIcon className="h-5 w-5 transform duration-300 ease-in-out -rotate-90 group-radix-state-open:rotate-0" />
							</Collapsible.Trigger>
							<Collapsible.Content className="mt-4 flex flex-col space-y-4">
								{["80s Synthwave", "Maximale Konzentration"].map(
									(title, i) => (
										<div
											key={`collapsible-${title}-${i}`}
											className={cx(
												"group",
												"ml-4 flex select-none items-center justify-between rounded-md px-4 py-2 text-left text-sm font-medium",
												"bg-white text-gray-900 hover:bg-gray-100 dark:bg-neutral-800 dark:text-gray-100 dark:hover:bg-neutral-700"
											)}
										>
											{title}
											<div className="hidden items-center space-x-3 group-hover:flex">
												<ShareIcon className="h-4 w-4 cursor-pointer text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" />
												<PlayIcon className="h-4 w-4 cursor-pointer text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" />
											</div>
										</div>
									)
								)}
							</Collapsible.Content>
						</Collapsible.Root>
					</Section>

					<Section id="popover" name="Popover" className="relative">
						<Popover.Root>
							<Popover.Trigger asChild>
								<button className="flex items-center px-2 py-1 bg-blue-500 hover:bg-blue-600 cursor-pointer transition-all text-white rounded focus:outline-none">Open Popover</button>
							</Popover.Trigger>
							<Popover.Content
								align="center"
								sideOffset={4}
								className={cx(
									"z-50 radix-side-top:animate-slide-up radix-side-bottom:animate-slide-down",
									"w-48 rounded-lg p-4 shadow-md md:w-56",
									"bg-white dark:bg-neutral-800"
								)}
							>
								<Popover.Arrow className="fill-current text-white dark:text-neutral-800" />
								<h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">
									Dimensions
								</h3>

								<form className="mt-4 space-y-2">
									<fieldset
										key={`popover-items-width`}
										className="flex items-center"
									>
										<label
											htmlFor="width"
											className="shrink-0 grow text-xs font-medium text-gray-700 dark:text-gray-400"
										>
											Width
										</label>
										<input
											id="width"
											type="text"
											defaultValue={"100%"}
											autoComplete="given-name"
											className={cx(
												"block w-1/2 rounded-md",
												"text-xs text-gray-700 placeholder:text-gray-500 dark:text-gray-400 dark:placeholder:text-gray-600",
												"border border-gray-400 focus-visible:border-transparent dark:border-gray-700 dark:bg-neutral-800",
												"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
											)}
										/>
									</fieldset>
								</form>

								<Popover.Close
									className={cx(
										"absolute top-3.5 right-3.5 inline-flex items-center justify-center rounded-full p-1",
										"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
									)}
								>
									<XIcon className="h-4 w-4 text-gray-500 hover:text-gray-700 dark:text-gray-500 dark:hover:text-gray-400" />
								</Popover.Close>
							</Popover.Content>
						</Popover.Root>
					</Section>

					<Section id="alert-dialog" name="Alert Dialog" className="relative">
						<AlertDialog.Root open={openAlertDialog} onOpenChange={setOpenAlertDialog}>
							<AlertDialog.Trigger asChild>
								<Button>Open Alert Dialog</Button>
							</AlertDialog.Trigger>
							<Transition.Root show={openAlertDialog}>
								<Transition.Child
									as={Fragment}
									enter="ease-out duration-300"
									enterFrom="opacity-0"
									enterTo="opacity-100"
									leave="ease-in duration-200"
									leaveFrom="opacity-100"
									leaveTo="opacity-0"
								>
									<AlertDialog.Overlay
										forceMount
										className="fixed inset-0 z-20 bg-black/50"
									/>
								</Transition.Child>
								<Transition.Child
									as={Fragment}
									enter="ease-out duration-300"
									enterFrom="opacity-0 scale-95"
									enterTo="opacity-100 scale-100"
									leave="ease-in duration-200"
									leaveFrom="opacity-100 scale-100"
									leaveTo="opacity-0 scale-95"
								>
									<AlertDialog.Content
										forceMount
										className={cx(
											"fixed z-50",
											"w-[95vw] max-w-md rounded-lg p-4 md:w-full",
											"top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%]",
											"bg-white dark:bg-neutral-900",
											"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
										)}
									>
										<AlertDialog.Title className="text-sm font-medium text-gray-900 dark:text-gray-100">
											Are you absolutely sure?
										</AlertDialog.Title>
										<AlertDialog.Description className="mt-2 text-sm font-normal text-gray-700 dark:text-gray-400">
											This action cannot be undone. This will permanently delete your
											account and remove your data from our servers.
										</AlertDialog.Description>
										<div className="mt-4 flex justify-end space-x-2">
											<AlertDialog.Cancel
												className={cx(
													"inline-flex select-none justify-center rounded-md px-4 py-2 text-sm font-medium",
													"bg-white text-gray-900 hover:bg-gray-100 dark:bg-gray-700 dark:text-gray-100 hover:dark:bg-gray-600",
													"border border-gray-300 dark:border-transparent",
													"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
												)}
											>
												Cancel
											</AlertDialog.Cancel>
											<AlertDialog.Action
												className={cx(
													"inline-flex select-none justify-center rounded-md px-4 py-2 text-sm font-medium",
													"bg-red-600 text-white hover:bg-red-700 dark:bg-red-700 dark:text-gray-100 dark:hover:bg-red-600",
													"border border-transparent",
													"focus:outline-none focus-visible:ring focus-visible:ring-red-500 focus-visible:ring-opacity-75"
												)}
											>
												Confirm
											</AlertDialog.Action>
										</div>
									</AlertDialog.Content>
								</Transition.Child>
							</Transition.Root>
						</AlertDialog.Root>
					</Section>

					<Section id="dialog" name="Dialog" className="relative">
						<Dialog.Root open={openDialog} onOpenChange={setOpenDialog}>
							<Dialog.Trigger asChild>
								<Button>Open Dialog</Button>
							</Dialog.Trigger>
							<Transition.Root show={openDialog}>
								<Transition.Child
									as={Fragment}
									enter="ease-out duration-300"
									enterFrom="opacity-0"
									enterTo="opacity-100"
									leave="ease-in duration-200"
									leaveFrom="opacity-100"
									leaveTo="opacity-0"
								>
									<Dialog.Overlay
										forceMount
										className="fixed inset-0 z-20 bg-black/50"
									/>
								</Transition.Child>
								<Transition.Child
									as={Fragment}
									enter="ease-out duration-300"
									enterFrom="opacity-0 scale-95"
									enterTo="opacity-100 scale-100"
									leave="ease-in duration-200"
									leaveFrom="opacity-100 scale-100"
									leaveTo="opacity-0 scale-95"
								>
									<Dialog.Content
										forceMount
										className={cx(
											"fixed z-50",
											"w-[95vw] max-w-md rounded-lg p-4 md:w-full",
											"top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%]",
											"bg-white dark:bg-neutral-900",
											"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
										)}
									>
										<Dialog.Title className="text-sm font-medium text-gray-900 dark:text-gray-100">
											Edit profile
										</Dialog.Title>
										<Dialog.Description className="mt-2 text-sm font-normal text-gray-700 dark:text-gray-400">
											Make changes to your profile here. Click save when you&apos;re
											done.
										</Dialog.Description>
										<form className="mt-2 space-y-2">
											<fieldset>
												<label
													htmlFor="firstName"
													className="text-xs font-medium text-gray-700 dark:text-gray-400"
												>
													First Name
												</label>
												<input
													id="firstName"
													type="text"
													placeholder="Tim"
													autoComplete="given-name"
													className={cx(
														"mt-1 block w-full rounded-md",
														"text-sm text-gray-700 placeholder:text-gray-500 dark:text-gray-400 dark:placeholder:text-gray-600",
														"border border-gray-400 focus-visible:border-transparent dark:border-gray-700 dark:bg-neutral-800",
														"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
													)}
												/>
											</fieldset>
										</form>

										<div className="mt-4 flex justify-end">
											<Dialog.Close
												className={cx(
													"inline-flex select-none justify-center rounded-md px-4 py-2 text-sm font-medium",
													"bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-700 dark:text-gray-100 dark:hover:bg-blue-600",
													"border border-transparent",
													"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
												)}
											>
												Save
											</Dialog.Close>
										</div>

										<Dialog.Close
											className={cx(
												"absolute top-3.5 right-3.5 inline-flex items-center justify-center rounded-full p-1",
												"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
											)}
										>
											<XIcon className="h-4 w-4 text-gray-500 hover:text-gray-700 dark:text-gray-500 dark:hover:text-gray-400" />
										</Dialog.Close>
									</Dialog.Content>
								</Transition.Child>
							</Transition.Root>
						</Dialog.Root>
					</Section>

					<Section id="dropdown-menu" name="Dropdown Menu" className="relative">
						<DropdownMenu.Root>
							<DropdownMenu.Trigger asChild>
								<button className="flex items-center px-2 py-1 bg-blue-500 hover:bg-blue-600 cursor-pointer transition-all text-white rounded focus:outline-none">Open Dropdown</button>
							</DropdownMenu.Trigger>

							<DropdownMenu.Portal>
								<DropdownMenu.Content
									align="end"
									sideOffset={5}
									className={cx(
										" radix-side-top:animate-slide-up radix-side-bottom:animate-slide-down",
										"w-48 rounded-lg px-1.5 py-1 shadow-md md:w-56",
										"bg-white dark:bg-neutral-800"
									)}
								>
									{generalMenuItems.map(({ label, icon, shortcut }, i) => (
										<DropdownMenu.Item
											key={`${label}-${i}`}
											className={cx(
												"flex cursor-default select-none items-center rounded-md px-2 py-2 text-xs outline-none",
												"text-gray-400 focus:bg-gray-100 dark:text-gray-500 dark:focus:bg-neutral-900"
											)}
										>
											{icon}
											<span className="flex-grow text-gray-700 dark:text-gray-300">
												{label}
											</span>
											{shortcut && <span className="text-xs">{shortcut}</span>}
										</DropdownMenu.Item>
									))}

									<DropdownMenu.Separator className="my-1 h-px bg-gray-200 dark:bg-neutral-700" />

									<DropdownMenu.CheckboxItem
										checked={showGrid}
										onCheckedChange={setShowGrid}
										className={cx(
											"flex w-full cursor-default select-none items-center rounded-md px-2 py-2 text-xs outline-none",
											"text-gray-400 focus:bg-gray-100 dark:text-gray-500 dark:focus:bg-neutral-900"
										)}
									>
										{showGrid ? (
											<ViewGridIcon className="mr-2 h-4 w-4" />
										) : (
											<ViewGridAddIcon className="mr-2 h-3.5 w-3.5 text-gray-700 dark:text-gray-300" />
										)}
										<span className="flex-grow text-gray-700 dark:text-gray-300">
											Show Grid
										</span>
										<DropdownMenu.ItemIndicator>
											<CheckIcon className="h-3.5 w-3.5 text-green-600" />
										</DropdownMenu.ItemIndicator>
									</DropdownMenu.CheckboxItem>

									<DropdownMenu.Separator className="my-1 h-px bg-gray-200 dark:bg-neutral-700" />

									<DropdownMenu.Sub>
										<DropdownMenu.SubTrigger
											className={cx(
												"flex w-full cursor-default select-none items-center rounded-md px-2 py-2 text-xs outline-none",
												"text-gray-400 focus:bg-gray-100 dark:text-gray-500 dark:focus:bg-neutral-900"
											)}
										>
											<ExternalLinkIcon className="mr-2 h-3.5 w-3.5" />
											<span className="flex-grow text-gray-700 dark:text-gray-300">
												Share
											</span>
											<ArrowSmRightIcon className="h-3.5 w-3.5" />
										</DropdownMenu.SubTrigger>
										<DropdownMenu.Portal>
											<DropdownMenu.SubContent
												className={cx(
													"origin-radix-dropdown-menu radix-side-right:animate-scale-in",
													"w-full rounded-md px-1 py-1 text-xs shadow-md",
													"bg-white dark:bg-neutral-800"
												)}
											>
												{users.map(({ name, url }, i) => (
													<DropdownMenu.Item
														key={`${name}-${i}`}
														className={cx(
															"flex w-28 cursor-default select-none items-center rounded-md px-2 py-2 text-xs outline-none md:w-32",
															"text-gray-400 focus:bg-gray-100 dark:text-gray-500 dark:focus:bg-neutral-900"
														)}
													>
														{url ? (
															<div className="relative mr-2.5 h-6 w-6">
																<Image alt="avatar" src={url} layout="fill" className="rounded-full" />
															</div>
														) : (
															<UserCircleIcon className="mr-2.5 h-6 w-6" />
														)}
														<span className="text-gray-700 dark:text-gray-300">
															{name}
														</span>
													</DropdownMenu.Item>
												))}
											</DropdownMenu.SubContent>
										</DropdownMenu.Portal>
									</DropdownMenu.Sub>
								</DropdownMenu.Content>
							</DropdownMenu.Portal>
						</DropdownMenu.Root>
					</Section>

					<Section id="toast" name="Toast" className="relative">
						<Toast.Provider>
							<Button
								onClick={() => {
									if (openToast) {
										setOpenToast(false);
										setTimeout(() => {
											setOpenToast(true);
										}, 100);
									} else {
										setOpenToast(true);
									}
								}}
							>
								Show Toast
							</Button>
							<Toast.Root
								open={openToast}
								onOpenChange={setOpenToast}
								className={cx(
									"z-50 fixed bottom-4 inset-x-4 w-auto md:top-4 md:right-4 md:left-auto md:bottom-auto md:w-full md:max-w-sm shadow-lg rounded-lg",
									"bg-white dark:bg-neutral-800",
									"radix-state-open:animate-toast-slide-in-bottom md:radix-state-open:animate-toast-slide-in-right",
									"radix-state-closed:animate-toast-hide",
									"radix-swipe-end:animate-toast-swipe-out",
									"translate-x-radix-toast-swipe-move-x",
									"radix-swipe-cancel:translate-x-0 radix-swipe-cancel:duration-200 radix-swipe-cancel:ease-[ease]",
									"focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
								)}
							>
								<div className="flex">
									<div className="w-0 flex-1 flex items-center pl-5 py-4">
										<div className="w-full radix">
											<Toast.Title className="text-sm font-medium text-gray-900 dark:text-gray-100">
												Pull Request Review
											</Toast.Title>
											<Toast.Description className="mt-1 text-sm text-gray-700 dark:text-gray-400">
												Someone requested your review on{" "}
												<span className="font-medium">repository/branch</span>
											</Toast.Description>
										</div>
									</div>
									<div className="flex">
										<div className="flex flex-col px-3 py-2 space-y-1">
											<div className="h-0 flex-1 flex">
												<Toast.Action
													altText="view now"
													className="w-full border border-transparent rounded-lg px-3 py-2 flex items-center justify-center text-sm font-medium text-blue-600 dark:text-blue-500 hover:bg-gray-100 dark:hover:bg-neutral-900 focus:z-10 focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75"
													onClick={(e) => {
														e.preventDefault();
														window.open("https://github.com");
													}}
												>
													Review
												</Toast.Action>
											</div>
											<div className="h-0 flex-1 flex">
												<Toast.Close className="w-full border border-transparent rounded-lg px-3 py-2 flex items-center justify-center text-sm font-medium text-gray-700 dark:text-gray-100 hover:bg-gray-100 dark:hover:bg-neutral-900 focus:z-10 focus:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-75">
													Dismiss
												</Toast.Close>
											</div>
										</div>
									</div>
								</div>
							</Toast.Root>

							<Toast.Viewport />
						</Toast.Provider>
					</Section>

					<Section id="select" name="Select" className="relative">
						<Select.Root defaultValue="blueberry" className="relative">
							<Select.Trigger aria-label="Food" className="flex items-center px-2 py-1 bg-blue-500 hover:bg-blue-600 cursor-pointer transition-all text-white rounded focus:outline-none">
								{/* <Button className="flex" > */}
								<Select.Value />
								<Select.Icon className="ml-2">
									<ChevronDownIcon className="w-5 h-5" />
								</Select.Icon>
								{/* </Button> */}
							</Select.Trigger>
							<Select.Content>
								<Select.ScrollUpButton className="flex items-center justify-center text-gray-700 dark:text-gray-300">
									<ChevronUpIcon className="w-5 h-5" />
								</Select.ScrollUpButton>
								<Select.Viewport className="bg-white dark:bg-neutral-800 p-2 rounded-lg shadow-lg">
									<Select.Group className="">
										{["Blueberry", "Strawberry", "Grapes"].map(
											(item, Index) => (
												<Select.Item
													disabled={item === "Grapes"}
													key={`${item}-${Index}`}
													value={item.toLowerCase()}
													className={cx(
														"relative flex items-center px-8 py-2 rounded-md text-sm text-gray-700 dark:text-gray-300 font-medium focus:bg-gray-100 dark:focus:bg-neutral-900",
														"radix-disabled:opacity-50 radix-disabled:cursor-not-allowed",
														"focus:outline-none select-none cursor-pointer"
													)}
												>
													<Select.ItemText>{item}</Select.ItemText>
													<Select.ItemIndicator className="absolute left-2 inline-flex items-center">
														<CheckIcon className="w-5 h-5 text-green-600" />
													</Select.ItemIndicator>
												</Select.Item>
											)
										)}
									</Select.Group>
								</Select.Viewport>
								<Select.ScrollDownButton className="flex items-center justify-center text-gray-700 dark:text-gray-300">
									<ChevronDownIcon className="w-5 h-5" />
								</Select.ScrollDownButton>
							</Select.Content>
						</Select.Root>
					</Section>

					<Section id="navigation-menu" name="Navigation Menu">
						<NavigationMenu.Root className="relative">
							<NavigationMenu.List className="flex flex-row rounded-lg bg-gray-100 dark:bg-neutral-800 p-2">
								<NavigationMenu.Item>
									<NavigationMenu.Trigger
										className={cx(
											"px-3 py-2 text-sm rounded-md hover:bg-gray-50 dark:hover:bg-neutral-900",
											"text-sm font-medium",
											"text-gray-700 dark:text-gray-100"
										)}
									>
										Overview
									</NavigationMenu.Trigger>
									<NavigationMenu.Content
										className={cx(
											"absolute w-auto top-0 left-0 rounded-lg",
											"radix-motion-from-start:animate-enter-from-left",
											"radix-motion-from-end:animate-enter-from-right",
											"radix-motion-to-start:animate-exit-to-left",
											"radix-motion-to-end:animate-exit-to-right"
										)}
									>
										<div className="w-[21rem] lg:w-[23rem] p-3">
											<div className="grid grid-cols-6 gap-4">
												<div className="col-span-2 w-full bg-gray-100 dark:bg-neutral-900 p-4 rounded-md"></div>
												<div className="col-span-4 w-full flex flex-col space-y-3 bg-gray-100 dark:bg-neutral-900 p-4 rounded-md">
													<div className="w-full bg-white dark:bg-neutral-700 h-12 rounded-md"></div>
												</div>
											</div>
										</div>
									</NavigationMenu.Content>
								</NavigationMenu.Item>

								<NavigationMenu.Item>
									<NavigationMenu.Trigger
										className={cx(
											"px-3 py-2 text-sm rounded-md hover:bg-gray-50 dark:hover:bg-neutral-900",
											"text-sm font-medium text-gray-700 dark:text-gray-100"
										)}
									>
										Resources
									</NavigationMenu.Trigger>
									<NavigationMenu.Content
										className={cx(
											"absolute w-auto top-0 left-0 rounded-lg",
											"radix-motion-from-start:animate-enter-from-left",
											"radix-motion-from-end:animate-enter-from-right",
											"radix-motion-to-start:animate-exit-to-left",
											"radix-motion-to-end:animate-exit-to-right"
										)}
									>
										<div className="w-[16rem] lg:w-[18rem] p-3">
											<div className="w-full flex flex-col space-y-2">
												<NavigationMenu.Link
													className={"w-full p-2 hover:bg-gray-100 dark:hover:bg-neutral-900 rounded-md"}
													href="https://tailwindcss.com"
												>
													<span className="text-sm font-medium text-gray-900 dark:text-gray-100">
														Tailwind CSS
													</span>
													<div className="mt-1 text-sm text-gray-700 dark:text-gray-400">
														A utility-first CSS framework for rapidly building custom
														user interfaces.
													</div>
												</NavigationMenu.Link>
											</div>
										</div>
									</NavigationMenu.Content>
								</NavigationMenu.Item>

								<NavigationMenu.Item asChild>
									<NavigationMenu.Link
										href="https://github.com/ecklf/tailwindcss-radix"
										className={cx(
											"px-3 py-2 text-sm rounded-md hover:bg-gray-50 dark:hover:bg-neutral-900",
											"text-sm font-medium text-gray-700 dark:text-gray-100"
										)}
									>
										GitHub
									</NavigationMenu.Link>
								</NavigationMenu.Item>

								{/* Arrow Indicator  */}
								<NavigationMenu.Indicator
									className={cx(
										"z-10",
										"top-[100%] flex items-end justify-center h-2 overflow-hidden",
										"radix-state-visible:animate-fade-in",
										"radix-state-hidden:animate-fade-out",
										"transition-[width_transform] duration-[250ms] ease-[ease]"
									)}
								>
									<div className="top-1 relative bg-gray-100 dark:bg-neutral-800 w-2 h-2 rotate-45" />
								</NavigationMenu.Indicator>
							</NavigationMenu.List>

							{/* Panel Background */}
							<div
								className={"absolute flex justify-center"}
								style={{
									perspective: "2000px",
								}}
							>
								<NavigationMenu.Viewport
									className={cx(
										"relative mt-2 shadow-lg rounded-md bg-white dark:bg-neutral-800 overflow-hidden",
										"w-radix-navigation-menu-viewport",
										"h-radix-navigation-menu-viewport",
										"radix-state-open:animate-scale-in-content",
										"radix-state-closed:animate-scale-out-content",
										"origin-[top_center] transition-[width_height] duration-300 ease-[ease]"
									)}
								/>
							</div>
						</NavigationMenu.Root>
					</Section>

					<Section id="hover-card" name="Hover Card (Link)">
						<HoverCard.Root>
							<HoverCard.Trigger className="sm:m-32">
								<LinkButton href="https://twitter.com/twitter" target="_blank">
									Twitter
								</LinkButton>
							</HoverCard.Trigger>
							<HoverCard.Portal>
								<HoverCard.Content className="bg-white dark:bg-neutral-800 p-4 rounded-md shadow-xl max-w-xs">
									<div className="bg-sky-500 rounded-full w-8 h-8 flex items-center justify-center">
										<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
											<path strokeLinecap="round" strokeLinejoin="round" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
										</svg>
									</div>
									<p className="font-medium text-base mt-2 dark:text-white">Twitter</p>
									<p className="text-gray-500 dark:text-gray-400 text-sm">@twitter</p>
									<p className="my-2 text-sm text-gray-700 dark:text-gray-300">Dolore do ipsum reprehenderit occaecat nostrud aliqua enim cillum proident ex cillum.</p>
									<div className="flex items-center gap-3">
										<p className="text-gray-500 dark:text-gray-400"><span className="text-neutral-800 dark:text-white font-medium">0</span> Following</p>
										<p className="text-gray-500 dark:text-gray-400"><span className="text-neutral-800 dark:text-white font-medium">1000</span> Followers</p>
									</div>
									<HoverCard.Arrow className="fill-white dark:fill-neutral-800" />
								</HoverCard.Content>
							</HoverCard.Portal>
						</HoverCard.Root>
					</Section>

					<Section id="tooltip" name="Tooltip">
						<Tooltip.Provider>
							<Tooltip.Root>
								<Tooltip.Trigger><Button>Tooltip</Button></Tooltip.Trigger>
								<Tooltip.Portal>
									<Tooltip.Content className="bg-gray-100 dark:bg-neutral-800 dark:text-white text-sm px-2 py-1 rounded mb-1.5">
										Tooltip Content
										<div className="absolute w-3 h-3 mt-6 bottom-0.5 left-1/2 transform -translate-x-1/2 rotate-45 dark:bg-neutral-700 bg-gray-200 -z-10 rounded-sm"></div>
									</Tooltip.Content>
								</Tooltip.Portal>
							</Tooltip.Root>
						</Tooltip.Provider>
					</Section>

					<Section id="context-menu" name="Context Menu (Right Click)">
						<ContextMenu.Root>
							<ContextMenu.Trigger>
								<div className="border-2 rounded-md cursor-pointer dark:border-neutral-700 border-dashed p-12 flex items-center justify-center dark:text-white font-medium">
									Right Click
								</div>
							</ContextMenu.Trigger>
							<ContextMenu.Portal>
								<ContextMenu.Content className="bg-white dark:bg-neutral-800 rounded shadow-md py-1.5">
									<ul>
										<li className="text-sm group dark:text-white cursor-pointer hover:bg-gray-100 dark:hover:bg-neutral-900 transition-all px-3 py-1.5">
											<button onClick={() => alert("First Button Clicked !")} className="text-gray-600 dark:text-gray-300 group-hover:text-sky-500 font-medium">First Button</button>
										</li>
										<li className="text-sm group dark:text-white cursor-pointer hover:bg-gray-100 dark:hover:bg-neutral-900 transition-all px-3 py-1.5">
											<button onClick={() => alert("Second Button Clicked !")} className="text-gray-600 dark:text-gray-300 group-hover:text-sky-500 font-medium">Second Button</button>
										</li>
										<li className="text-sm group dark:text-white cursor-pointer hover:bg-gray-100 dark:hover:bg-neutral-900 transition-all px-3 py-1.5">
											<button onClick={() => alert("Third Button Clicked !")} className="text-gray-600 dark:text-gray-300 group-hover:text-sky-500 font-medium">Third Button</button>
										</li>
									</ul>
								</ContextMenu.Content>
							</ContextMenu.Portal>
						</ContextMenu.Root>
					</Section>

					<BackToTop />

				</main>
			</Layout>

			<Footer />

		</>
	);
}